-- +================================================================+
-- | STEP-2__CamundaArchiving_CREATE_Archive_Tables.sql
-- +================================================================+
-- | Camunda Version: 7.6.0; Oracle 12c tested
-- | State as of: 20.03.2017 
-- | S. Hellmann, M. Krassmann: Silpion; T. Hirsch for Haspa; Ingo Richtsmeier for Camunda;
-- | Thomas Lenarz for Talanx;
-- |
-- | Changed: 25.08.2016
-- |   added archive-table ARCHIVE_SOAPMESSAGES for Talanx
-- |   Thomas Lenarz for Talanx
-- |
-- | Changed: 28.10.2016
-- |   added column to table TMP_ARCHIVING_PROCINST:
-- |     BUSINESSKEY NVARCHAR2(255)
-- |   for archiving SOAPMESSAGES without processinstanceid
-- |   A processinstanceid does not exist for the initial SOAP-Message
-- |   since the Camunda-process is being created after it is processed.
-- | 
-- |   Thomas Lenarz for Talanx
-- |
-- | Changed: 07.03.2017
-- |   added creation of archive tables for ACT_HI_BATCH, ACT_HI_JOB_LOG,
-- |   ACT_HI_DECINST, ACT_HI_DEC_IN, ACT_DEC_OUT.
-- |   Those tables were missing or were introduced in subsequent versions of
-- |   Camunda not yet covered by the archiving.
-- | 
-- |   Thomas Lenarz for Talanx
-- |
-- | DOC.:
-- |  Create Archiving Tables in current schema 
-- +================================================================+

COLUMN vcomplogfile new_value vcomplogfile NOPRINT;
SELECT 'STEP-2__CamundaArchiving_CREATE_Archive_Tables_'|| TO_CHAR(SYSDATE,'DDMonYYYY_hh24_mi_ss') || '.lst' AS vcomplogfile
FROM dual;
spool &vcomplogfile

whenever sqlerror continue
whenever oserror continue
set autocommit off;
set heading off;
-- +================================================================+
show user;
select 'DATABASE = ' || sys_context('USERENV','DB_NAME') DB from dual;
-- +================================================================+
set heading on;
set echo on;
-- +================================================================+
-- +==== ENDE SQL HEADER ===========================================+
-- +================================================================+

-- Block 1 ohne Abbruch bei Fehler [z.B. drop Table....]

-- Block 2 Abbruch bei Fehler
whenever SQLERROR EXIT sql.sqlcode ROLLBACK
whenever OSERROR EXIT 20001 ROLLBACK


/*-- TMP_ARCHIVING_PROCINST */
CREATE TABLE TMP_ARCHIVING_PROCINST
( PROC_INST_ID_ NVARCHAR2(64) NOT NULL ENABLE,
  BUSINESSKEY_ NVARCHAR2(255),
  END_TIME_ TIMESTAMP (6)
);
CREATE INDEX AI_TMP_ARCH_PROCINST_PI_ID ON TMP_ARCHIVING_PROCINST(PROC_INST_ID_);

/*-- TMP_ARCHIVING_BYTEARRAY */
CREATE TABLE TMP_ARCHIVING_BYTEARRAY
( BYTEARRAY_ID_ NVARCHAR2(64) NOT NULL ENABLE,
  PROC_INST_ID_ NVARCHAR2(64)
);
CREATE INDEX AI_TMP_ARCH_BYTEARRAY_BAID ON TMP_ARCHIVING_BYTEARRAY(BYTEARRAY_ID_);

/*-- TMP_ARCHIVING_DEC */
CREATE TABLE TMP_ARCHIVING_DEC
( DEC_INST_ID_ NVARCHAR2(64) NOT NULL ENABLE,
  PROC_INST_ID_ NVARCHAR2(64)
);
CREATE INDEX AI_TMP_ARCH_DEC_DI_ID ON TMP_ARCHIVING_DEC(DEC_INST_ID_);

/*-- TMP_ARCHIVING_BATCH */
CREATE TABLE TMP_ARCHIVING_BATCH
( BATCH_ID_ NVARCHAR2(64) NOT NULL ENABLE,
  END_TIME_ TIMESTAMP (6)
);
CREATE INDEX AI_TMP_ARCH_BATCH_B_ID ON TMP_ARCHIVING_BATCH(BATCH_ID_);

/*--#1 ARCHIVE_ACT_HI_PROCINST; */
create TABLE ARCHIVE_ACT_HI_PROCINST
AS ( select * from ACT_HI_PROCINST where 1=0);

create index AI_HI_PROCINST_END_TIME on ARCHIVE_ACT_HI_PROCINST(END_TIME_);
ALTER TABLE ARCHIVE_ACT_HI_PROCINST ADD CONSTRAINT  ARCHIVE_ACT_HI_PROCINST_UQ UNIQUE ( PROC_INST_ID_);

/*--#2   ARCHIVE_ACT_HI_ACTINST; */
create TABLE ARCHIVE_ACT_HI_ACTINST
AS ( select * from ACT_HI_ACTINST where 1=0);

create index AI_HI_ACTINST_PROC_INST_ID on ARCHIVE_ACT_HI_ACTINST(PROC_INST_ID_);
create index AI_HI_ACTINST_END_TIME on ARCHIVE_ACT_HI_ACTINST(END_TIME_);

/*--#3  ARCHIVE_ACT_HI_TASKINST; */
create TABLE ARCHIVE_ACT_HI_TASKINST
AS ( select * from ACT_HI_TASKINST where 1=0);

create index AI_HI_TASKINST_PROC_INST_ID on ARCHIVE_ACT_HI_TASKINST(PROC_INST_ID_);
create index AI_HI_TASKINST_END_TIME on ARCHIVE_ACT_HI_TASKINST(END_TIME_);

/*--#4 ARCHIVE_ACT_HI_VARINST; */
create TABLE ARCHIVE_ACT_HI_VARINST
AS ( select * from ACT_HI_VARINST where 1=0);

create index AI_HI_VARINST_PROC_INST_ID on ARCHIVE_ACT_HI_VARINST(PROC_INST_ID_);

/*--#5 ARCHIVE_ACT_HI_DETAIL; */
create TABLE ARCHIVE_ACT_HI_DETAIL
AS ( select * from ACT_HI_DETAIL where 1=0);

create index AI_HI_DETAIL_PROC_INST_ID on ARCHIVE_ACT_HI_DETAIL(PROC_INST_ID_);
create index AI_HI_DETAIL_TIME on ARCHIVE_ACT_HI_DETAIL(TIME_);

/*--#6 ARCHIVE_ACT_HI_COMMENT; */
create TABLE ARCHIVE_ACT_HI_COMMENT
AS ( select * from ACT_HI_COMMENT where 1=0);

create index AI_HI_COMMENT_PROC_INST_ID on ARCHIVE_ACT_HI_COMMENT(PROC_INST_ID_);
create index AI_HI_COMMENT_TIME on ARCHIVE_ACT_HI_COMMENT(TIME_);

/*--#7 ARCHIVE_ACT_HI_ATTACHMENT; */
create TABLE ARCHIVE_ACT_HI_ATTACHMENT
AS ( select * from ACT_HI_ATTACHMENT where 1=0);

create index AI_HI_ATTACHMENT_PROC_INST_ID on ARCHIVE_ACT_HI_ATTACHMENT(PROC_INST_ID_);

/*--#8 ARCHIVE_ACT_HI_OP_LOG; */
create TABLE ARCHIVE_ACT_HI_OP_LOG
AS ( select * from ACT_HI_OP_LOG where 1=0);

create index AI_HI_OP_LOG_PROC_INST_ID on ARCHIVE_ACT_HI_OP_LOG(PROC_INST_ID_);
create index AI_HI_OP_LOG_TIMESTAMP on ARCHIVE_ACT_HI_OP_LOG(TIMESTAMP_);

/*--#9 ARCHIVE_ACT_HI_INCIDENT; */
create TABLE ARCHIVE_ACT_HI_INCIDENT
AS ( select * from ACT_HI_INCIDENT where 1=0);

create index AI_HI_INCIDENT_PROC_INST_ID on ARCHIVE_ACT_HI_INCIDENT(PROC_INST_ID_);

/*--#10 ARCHIVE_ACT_GE_BYTEARRAY; */
create TABLE ARCHIVE_ACT_GE_BYTEARRAY
AS ( select * from ACT_GE_BYTEARRAY where 1=0);

create index AI_GE_BYTEARRAY_ID_ on ARCHIVE_ACT_GE_BYTEARRAY(ID_);

/*--#11 ARCHIVE_ACT_HI_DECINST; */
create TABLE ARCHIVE_ACT_HI_DECINST
AS ( select * from ACT_HI_DECINST where 1=0);

create index AI_HI_DECINST_PROC_INST_ID on ARCHIVE_ACT_HI_DECINST(PROC_INST_ID_);

/*--#12 ARCHIVE_ACT_HI_DEC_IN; */
create TABLE ARCHIVE_ACT_HI_DEC_IN
AS ( select * from ACT_HI_DEC_IN where 1=0);

create index AI_HI_DEC_IN_DEC_INST_ID on ARCHIVE_ACT_HI_DEC_IN(ID_);

/*--#13 ARCHIVE_ACT_HI_DEC_OUT; */
create TABLE ARCHIVE_ACT_HI_DEC_OUT
AS ( select * from ACT_HI_DEC_OUT where 1=0);

create index AI_HI_DEC_OUT_DEC_INST_ID on ARCHIVE_ACT_HI_DEC_OUT(ID_);

/*--#14 ARCHIVE_ACT_HI_BATCH; */
create TABLE ARCHIVE_ACT_HI_BATCH
AS ( select * from ACT_HI_BATCH where 1=0);

create index AI_HI_BATCH_ID on ARCHIVE_ACT_HI_BATCH(ID_);

/*--#15 ARCHIVE_ACT_HI_JOB_LOG; */
create TABLE ARCHIVE_ACT_HI_JOB_LOG
AS ( select * from ACT_HI_JOB_LOG where 1=0);

create index AI_HI_JOB_LOG on ARCHIVE_ACT_HI_JOB_LOG(ID_);

/*--------------------------------------------------------------------------------------------------
 Add Meta to Archive
 -------------------------------------------------------------------------------------------------- */

/* Create STAT_EXECUTION_SEQ: each Archive Entry has a same Execution ID during one Archiving Run */
create sequence STAT_EXECUTION_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


/* -----------------------------------------------------------------------------
Extend a ARCHIVE: Table by two attributes: STAT_EXECUTION_ID, STAT_EXECUTION_TS 
*/
 
/*
--TEMPLATE:
alter table ARCHIVE_%TableName%
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_%TableName%_EXE_ID ON ARCHIVE_%TableName%(STAT_EXECUTION_ID);
*/


/*--#1 ACT_HI_PROCINST */
alter table ARCHIVE_ACT_HI_PROCINST
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_PROCINST_EXE_ID ON ARCHIVE_ACT_HI_PROCINST(STAT_EXECUTION_ID);

/*--#2 ACT_HI_ACTINST */
alter table ARCHIVE_ACT_HI_ACTINST
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_ACTINST_EXE_ID ON ARCHIVE_ACT_HI_ACTINST(STAT_EXECUTION_ID);

/*--#3 ACT_HI_TASKINST */
alter table ARCHIVE_ACT_HI_TASKINST
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_TASKINST_EXE_ID ON ARCHIVE_ACT_HI_TASKINST(STAT_EXECUTION_ID);

/*--#4 ACT_HI_VARINST */
alter table ARCHIVE_ACT_HI_VARINST
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_VARINST_EXE_ID ON ARCHIVE_ACT_HI_VARINST(STAT_EXECUTION_ID);

/*--#5 ACT_HI_DETAIL */
alter table ARCHIVE_ACT_HI_DETAIL
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_DETAIL_EXE_ID ON ARCHIVE_ACT_HI_DETAIL(STAT_EXECUTION_ID);

/*--#6 ACT_HI_COMMENT */
alter table ARCHIVE_ACT_HI_COMMENT
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_COMMENT_EXE_ID ON ARCHIVE_ACT_HI_COMMENT(STAT_EXECUTION_ID);

/*--#7 ACT_HI_ATTACHMENT */
alter table ARCHIVE_ACT_HI_ATTACHMENT
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_ATTACHMENT_EXE_ID ON ARCHIVE_ACT_HI_ATTACHMENT(STAT_EXECUTION_ID);

/*--#8 ACT_HI_OP_LOG */
alter table ARCHIVE_ACT_HI_OP_LOG
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_OP_LOG_EXE_ID ON ARCHIVE_ACT_HI_OP_LOG(STAT_EXECUTION_ID);

/*--#9 ACT_HI_INCIDENT */
alter table ARCHIVE_ACT_HI_INCIDENT
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_INCIDENT_EXE_ID ON ARCHIVE_ACT_HI_INCIDENT(STAT_EXECUTION_ID);

/*--#10 ACT_GE_BYTEARRAY */
alter table ARCHIVE_ACT_GE_BYTEARRAY
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_GE_BYTEARRAY_EXE_ID ON ARCHIVE_ACT_GE_BYTEARRAY(STAT_EXECUTION_ID);

/*--#11 ARCHIVE_ACT_HI_DECINST */
alter table ARCHIVE_ACT_HI_DECINST
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_DECINST_EXE_ID ON ARCHIVE_ACT_HI_DECINST(STAT_EXECUTION_ID);

/*--#12 ARCHIVE_ACT_HI_DEC_IN */
alter table ARCHIVE_ACT_HI_DEC_IN
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_DEC_IN_EXE_ID ON ARCHIVE_ACT_HI_DEC_IN(STAT_EXECUTION_ID);

/*--#13 ARCHIVE_ACT_HI_DEC_OUT */
alter table ARCHIVE_ACT_HI_DEC_OUT
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_DEC_OUT_EXE_ID ON ARCHIVE_ACT_HI_DEC_OUT(STAT_EXECUTION_ID);

/*--#14 ARCHIVE_ACT_HI_BATCH */
alter table ARCHIVE_ACT_HI_BATCH
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_BATCH_EXE_ID ON ARCHIVE_ACT_HI_BATCH(STAT_EXECUTION_ID);

/*--#15 ARCHIVE_ACT_HI_JOB_LOG */
alter table ARCHIVE_ACT_HI_JOB_LOG
    add (STAT_EXECUTION_ID NUMBER(20), STAT_EXECUTION_TS TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP );
CREATE INDEX AI_ACT_HI_JOB_LOG_EXE_ID ON ARCHIVE_ACT_HI_JOB_LOG(STAT_EXECUTION_ID);

SPOOL OFF
